import sys
sys.path.append("D:/python/Lib/site-packages")


from sklearn import model_selection, preprocessing, linear_model, naive_bayes, metrics, svm
from sklearn.feature_extraction.text import TfidfVectorizer, CountVectorizer
from sklearn import decomposition, ensemble

import pandas,  numpy,  string

#from keras.preprocessing import text, sequence
#from keras import layers, models, optimizers

def train_model(classifier, feature_vector_train, label, feature_vector_valid, is_neural_net=False):
    # fit the training dataset on the classifier
    classifier.fit(feature_vector_train, label)
    
    # predict the labels on validation dataset
    predictions = classifier.predict(feature_vector_valid)
    
    if is_neural_net:
        predictions = predictions.argmax(axis=-1)
    
    return metrics.accuracy_score(predictions, valid_y)

file = open("C://Users//pc//Desktop//training-v1//training-v1//offenseval-training-v1.tsv",encoding="utf8")
data=file.read()
print("hhhh")
labels, texts = [], []

for line in data.split("\n"):
    if line=="":
      break
    content = line.split("\t")
    labels.append(content[2])
    #print(labels)
    temp=content[1].replace("@USER","")
    #print(temp)
    texts.append(temp)
labels=labels[1:]
texts=texts[1:]
#i=0;
#while i<len(labels) :
    #print(texts[i]," ",labels[i])
    #i+=1
# create a dataframe using texts and lables
trainDF = pandas.DataFrame()
trainDF['label'] = labels
trainDF['text'] = texts

trainDF.loc[trainDF['label']=='OFF','label']=1
trainDF.loc[trainDF['label']=='NOT','label']=0
print(trainDF)

#df_x=trainDF['text']
#df_y=trainDF['label']

# split the dataset into training and validation datasets 
train_x, valid_x, train_y, valid_y = model_selection.train_test_split(trainDF['text'], trainDF['label'])

# label encode the target variable 
encoder = preprocessing.LabelEncoder()
train_y = encoder.fit_transform(train_y)
valid_y = encoder.fit_transform(valid_y)

# create a count vectorizer object 
count_vect = CountVectorizer(analyzer='word', token_pattern=r'\w{1,}')
count_vect.fit(trainDF['text'])

# transform the training and validation data using count vectorizer object
xtrain_count =  count_vect.transform(train_x)
xvalid_count =  count_vect.transform(valid_x)


# Naive Bayes on Count Vectors
accuracy = train_model(naive_bayes.MultinomialNB(), xtrain_count, train_y, xvalid_count)
print ("NB, Count Vectors: ", accuracy)

pred=.predict("shit")
print(pred)
